import React, { useState, useEffect } from 'react';
import { User, Role, InternetPackage, ActivityLog, Customer, IspProfile, WhatsAppTemplate, IssueReport } from './types';
import Login from './components/Login';
import Layout from './components/Layout';
import AdminDashboard from './components/dashboards/AdminDashboard';
import ManagementDashboard from './components/dashboards/SuperAdminDashboard';
import WhatsAppNotificationCenter from './components/dashboards/WhatsAppNotificationCenter';
import CustomerDashboard from './components/dashboards/CustomerDashboard';
import { supabase } from './supabaseClient';
import { Session } from '@supabase/supabase-js';

const App: React.FC = () => {
  const [session, setSession] = useState<Session | null>(null);
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // States for data from Supabase
  const [users, setUsers] = useState<User[]>([]);
  const [packages, setPackages] = useState<InternetPackage[]>([]);
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [activityLogs, setActivityLogs] = useState<ActivityLog[]>([]);
  const [ispProfile, setIspProfile] = useState<IspProfile | null>(null);
  const [waTemplates, setWaTemplates] = useState<WhatsAppTemplate[]>([]);
  const [issueReports, setIssueReports] = useState<IssueReport[]>([]);
  
  const [activeView, setActiveView] = useState('dashboard');

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      setLoading(false); // Initial load is done
    });

    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });

    return () => subscription.unsubscribe();
  }, []);
  
  useEffect(() => {
    if (session) {
      fetchUserProfileAndData(session.user.id);
    } else {
      setCurrentUser(null);
    }
  }, [session]);

  const fetchUserProfileAndData = async (userId: string) => {
    setLoading(true);
    const { data, error } = await supabase.from('profiles').select('*').eq('id', userId).single();
    
    if (error) {
        console.error('Error fetching user profile:', error);
        await supabase.auth.signOut();
        setCurrentUser(null);
    } else if (data) {
        // Here we combine auth.user with our profile data from the 'profiles' table
        const userWithRole: User = { ...session!.user, ...data };
        setCurrentUser(userWithRole);
        await fetchAllData();
    }
    setLoading(false);
  };
  
  const fetchAllData = async () => {
    // Note: In a larger app, you'd fetch data more selectively.
    // For this app's scale, fetching all on login is acceptable.
    const [
        packagesRes,
        customersRes,
        usersRes,
        ispProfileRes,
        waTemplatesRes,
        activityLogsRes,
        issueReportsRes
    ] = await Promise.all([
        supabase.from('packages').select('*'),
        supabase.from('customers').select('*'),
        supabase.from('profiles').select('id, name, role, status, username'), // Fetch non-sensitive user data
        supabase.from('isp_profile').select('*').limit(1).single(),
        supabase.from('whatsapp_templates').select('*'),
        supabase.from('activity_logs').select('*').order('timestamp', { ascending: false }).limit(100),
        supabase.from('issue_reports').select('*').order('reportedAt', { ascending: false }),
    ]);

    if (packagesRes.data) setPackages(packagesRes.data);
    if (customersRes.data) setCustomers(customersRes.data);
    if (usersRes.data) setUsers(usersRes.data as User[]);
    if (ispProfileRes.data) setIspProfile(ispProfileRes.data as IspProfile);
    if (waTemplatesRes.data) setWaTemplates(waTemplatesRes.data);
    if (activityLogsRes.data) setActivityLogs(activityLogsRes.data);
    if (issueReportsRes.data) setIssueReports(issueReportsRes.data);

    // Optional: Log errors for debugging
    [packagesRes, customersRes, usersRes, ispProfileRes, waTemplatesRes, activityLogsRes, issueReportsRes].forEach(res => {
        if (res.error) console.error("Error fetching data:", res.error.message);
    });
  };

  const handleLogout = async () => {
    await supabase.auth.signOut();
    setCurrentUser(null);
    // Clear all data states
    setUsers([]);
    setPackages([]);
    setCustomers([]);
    setActivityLogs([]);
    setIspProfile(null);
    setWaTemplates([]);
    setIssueReports([]);
  };
  
  const addActivityLog = async (action: string, user: User) => {
    if (!user) return;
    const newLog = {
        userId: user.id,
        userName: user.name,
        userRole: user.role,
        action,
        // timestamp is auto-generated by DB
    };
    const { data, error } = await supabase.from('activity_logs').insert([newLog]).select();
    if (data) {
        setActivityLogs(prevLogs => [data[0], ...prevLogs]);
    }
    if (error) console.error('Error adding activity log:', error);
  };

  const handlePasswordUpdate = async (userId: string, oldPass: string, newPass: string): Promise<{ success: boolean; message: string }> => {
    // Note: Supabase's updateUser doesn't require old password from client for security.
    // For a real app, re-authentication would be a better pattern.
    const { error } = await supabase.auth.updateUser({ password: newPass });

    if (error) {
        return { success: false, message: 'Gagal memperbarui password: ' + error.message };
    }
    
    if(currentUser) addActivityLog('Mengubah password.', currentUser);
    
    return { success: true, message: 'Password berhasil diperbarui!' };
  };

  const renderContent = () => {
    if (!currentUser) return null;

    const managementViews = ['users', 'packages', 'logs', 'settings'];

    if ((currentUser.role === Role.SUPER_ADMIN || currentUser.role === Role.ADMIN) && managementViews.includes(activeView)) {
        if (currentUser.role === Role.ADMIN && activeView === 'settings') {
            return <div className="text-white p-6 bg-slate-800 rounded-lg">Akses ditolak. Hanya Super Admin yang dapat mengakses halaman ini.</div>;
        }
        return <ManagementDashboard
            user={currentUser}
            users={users}
            packages={packages}
            activityLogs={activityLogs}
            addActivityLog={addActivityLog}
            ispProfile={ispProfile!}
            waTemplates={waTemplates}
            activeView={activeView}
            refreshData={fetchAllData}
        />;
    }
    
    if ((currentUser.role === Role.SUPER_ADMIN || currentUser.role === Role.ADMIN) && activeView === 'whatsapp') {
      return <WhatsAppNotificationCenter 
        user={currentUser} 
        customers={customers} 
        packages={packages}
        waTemplates={waTemplates}
        addActivityLog={addActivityLog}
      />
    }

    switch (currentUser.role) {
      case Role.SUPER_ADMIN:
      case Role.ADMIN:
      case Role.SALES:
        return <AdminDashboard 
                    user={currentUser} 
                    packages={packages} 
                    addActivityLog={addActivityLog}
                    customers={customers}
                    users={users}
                    ispProfile={ispProfile!}
                    activeView={activeView}
                    refreshData={fetchAllData}
                />;
      case Role.CUSTOMER:
        const customerData = customers.find(c => c.userId === currentUser.id);
        const customerReports = issueReports.filter(r => r.customerId === customerData?.id);
        return <CustomerDashboard 
                    user={currentUser} 
                    packages={packages} 
                    activeView={activeView}
                    customer={customerData}
                    issueReports={customerReports}
                    refreshData={fetchAllData}
                />;
      default:
        return <div>Anda tidak memiliki akses ke dasbor ini.</div>;
    }
  };
  
  const defaultIspProfile: IspProfile = { id: 'default', name: "ASRO.NET", logoUrl: "https://i.imgur.com/R0i1S1y.png", address: "Memuat...", contact: "", bankAccounts: [] };

  if (loading) {
      return (
          <div className="min-h-screen bg-slate-900 flex flex-col items-center justify-center text-white">
            <img src={defaultIspProfile.logoUrl} alt="Logo" className="h-20 animate-pulse" />
            <p className="mt-4 text-xl tracking-wider">Memuat Sistem...</p>
          </div>
      )
  }

  if (!currentUser) {
    return <Login ispProfile={ispProfile || defaultIspProfile} />;
  }
  
  if (!ispProfile) {
    return <div className="min-h-screen bg-slate-900 flex items-center justify-center text-white">Profil ISP tidak dapat dimuat. Periksa koneksi dan pengaturan Supabase Anda.</div>;
  }

  return (
    <Layout 
      user={currentUser} 
      onLogout={handleLogout} 
      onPasswordUpdate={handlePasswordUpdate} 
      ispProfile={ispProfile}
      activeView={activeView}
      setActiveView={setActiveView}
    >
        {renderContent()}
    </Layout>
  );
};

export default App;